{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo(a) ao Projeto de ETL","text":"<p>Este projeto foi desenvolvido com pr\u00e1ticas de estrutura\u00e7\u00e3o de projetos, documenta\u00e7\u00f5es, testes e c\u00f3digos de maneira modularizada, o objetivo final \u00e9 construir uma ETL com python na qual consolida 50 arquivos em Excel em um \u00fanico arquivo.</p> <p>Para conhecer mais sobre meu trabalho, visite vorges-data.</p>"},{"location":"#workflow","title":"Workflow","text":"<pre><code>flowchart LR\n    subgraph ETL[Pipeline]\n        A[M\u00faltiplos Arquivos: Arquivos Excel] --&gt; B[Extra\u00e7\u00e3o: extract_from_excel]\n        B[Extra\u00e7\u00e3o: extract_from_excel] --&gt; |Gera uma lista de Dataframes| C[Transforma\u00e7\u00e3o: consolidate_dataframes]\n        C[Transforma\u00e7\u00e3o: consolidate_dataframes] --&gt; |Gera um Dataframe Consolidado| D[Carga: Converte para Excel]\n        D[Carga: Converte para Excel] --&gt; |Salva o consolidado em Excel| E[Pasta Output: Um arquivo \u00fanico Excel]\n\n    end</code></pre>"},{"location":"#funcao-de-extracao-de-dados","title":"Fun\u00e7\u00e3o de Extra\u00e7\u00e3o de Dados","text":"<p>Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar um dataframe com os dados</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>caminho da pasta com os arquivos de entrada</p> required <code>return</code> <code>list</code> <p>dataframe com os dados dos arquivos</p> required Source code in <code>app/pipeline/extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input\n    e retornar um dataframe com os dados\n\n    args:\n        input_path (str): caminho da pasta com os arquivos de entrada\n        return list: dataframe com os dados dos arquivos\n    \"\"\"\n\n    # lista com os arquivos da pasta\n    all_files = glob.glob(os.path.join(path, \"*.xlsx\"))\n\n    # lista com os dataframes de cada arquivo\n    dataframes = []\n\n    # itera sobre os arquivos\n    for file in all_files:\n        # l\u00ea o arquivo e adiciona na lista de dataframes\n        dataframes.append(pd.read_excel(file))\n\n    # retorna a lista de dataframes\n    return dataframes\n</code></pre>"},{"location":"#funcao-de-tranformacao-de-dados","title":"Fun\u00e7\u00e3o de Tranforma\u00e7\u00e3o de Dados","text":"<p>Concatena uma lista de dataframes em um \u00fanico dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>dataframes</code> <code>list</code> <p>Lista de dataframes a serem concatenados.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: Um \u00fanico dataframe resultante da concatena\u00e7\u00e3o.</p> Source code in <code>app/pipeline/transform.py</code> <pre><code>def concat_to_dataframe(dataframes: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"\n    Concatena uma lista de dataframes em um \u00fanico dataframe.\n\n    Args:\n        dataframes (list): Lista de dataframes a serem concatenados.\n\n    Returns:\n        pandas.DataFrame: Um \u00fanico dataframe resultante da concatena\u00e7\u00e3o.\n    \"\"\"\n\n    # concatena os dataframes da lista\n    df = pd.concat(dataframes, ignore_index=True)\n\n    # retorna o dataframe\n    return df\n</code></pre>"},{"location":"#funcao-de-carga-de-dados","title":"Fun\u00e7\u00e3o de Carga de Dados","text":"<p>ecebe um dataframe e salva em arquivo excel</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>DataFrame</code> <p>dataframe a ser salvo como excel</p> required <code>output_path</code> <code>str</code> <p>caminho do arquivo de sa\u00edda</p> required <code>file_name</code> <code>str</code> <p>nome do arquivo de sa\u00edda</p> required <p>return: \"Arquivo salvo com sucesso!\"</p> Source code in <code>app/pipeline/load.py</code> <pre><code>def load_excel(data_frame: pd.DataFrame, output_path: str, file_name: str) -&gt; str:\n    \"\"\"\n    ecebe um dataframe e salva em arquivo excel\n\n    args:\n        data_frame (pd.DataFrame): dataframe a ser salvo como excel\n        output_path (str): caminho do arquivo de sa\u00edda\n        file_name (str): nome do arquivo de sa\u00edda\n\n    return: \"Arquivo salvo com sucesso!\"\n\n    \"\"\"\n\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n\n    # salva o arquivo excel\n    data_frame.to_excel(f\"{output_path}/{file_name}.xlsx\", index=False)\n\n    # retorna a mensagem de sucesso\n    return \"Arquivo salvo com sucesso!\"\n</code></pre>"}]}